{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport \"../../CommonImports\";\nimport \"../../Core/core.css\";\nimport \"./Button.css\";\nimport \"./ExpandableButton.css\";\nimport * as React from \"react\";\nimport { Expandable } from '../../Expandable';\nimport { Icon, IconSize } from '../../Icon';\nimport { css, KeyCode } from '../../Util';\nimport { Location } from '../../Utilities/Position';\nimport { Button } from \"./Button\";\nvar buttonId = 1;\n\nvar ExpandableButton =\n/** @class */\nfunction (_super) {\n  __extends(ExpandableButton, _super);\n\n  function ExpandableButton(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.buttonElement = React.createRef();\n    _this.expandable = React.createRef();\n\n    _this.collapse = function () {\n      if (_this.expandable.current) {\n        _this.expandable.current.collapse();\n      }\n    };\n\n    _this.expand = function () {\n      if (_this.expandable.current) {\n        _this.expandable.current.expand();\n      }\n    };\n\n    _this.renderCallout = function () {\n      return _this.props.renderCallout(_this, _this.dropdownId, _this.props.anchorElement ? _this.props.anchorElement : !_this.props.anchorPoint ? _this.containerElement.current ? _this.containerElement.current : undefined : undefined, _this.props.anchorOffset || {\n        horizontal: 0,\n        vertical: 0\n      }, _this.props.anchorOrigin || {\n        horizontal: Location.end,\n        vertical: Location.end\n      }, _this.props.anchorPoint, _this.props.dropdownOrigin || {\n        horizontal: Location.end,\n        vertical: Location.start\n      });\n    };\n\n    _this.dropdownId = props.dropdownId || \"dropdown-\" + buttonId++;\n    _this.containerElement = props.containerRef || React.createRef();\n    return _this;\n  }\n\n  ExpandableButton.prototype.render = function () {\n    var _this = this; // We disable the tooltip when we are expanded. Make sure we dont remove it\n    // from the component tree, this causes the button element to get regenerated\n    // and focus wont return.\n\n\n    return React.createElement(Expandable, {\n      disabled: this.props.disabled,\n      expandKey: this.props.expandKey,\n      onCollapse: this.props.onCollapse,\n      onExpand: this.props.onExpand,\n      renderCallout: this.renderCallout,\n      ref: this.expandable\n    }, function (expandableProps) {\n      var _a;\n\n      return React.createElement(\"div\", {\n        className: css(_this.props.className, \"bolt-expandable-button inline-flex-row\"),\n        onMouseDown: expandableProps.onMouseDown,\n        onKeyDown: expandableProps.onKeyDown,\n        ref: _this.containerElement\n      }, React.createElement(Button, __assign({}, _this.props, {\n        ariaControls: expandableProps.expanded ? _this.dropdownId : undefined,\n        ariaExpanded: expandableProps.expanded,\n        ariaHasPopup: true,\n        ariaLabel: _this.props.ariaLabel || _this.props.tooltipProps && _this.props.tooltipProps.text ? (_a = _this.props.tooltipProps) === null || _a === void 0 ? void 0 : _a.text : \"\",\n        className: css(!_this.props.text && !_this.props.children && _this.props.iconProps && \"icon-only\", expandableProps.expanded && \"active\"),\n        onClick: function (e) {\n          expandableProps.onClick(e);\n\n          if (_this.props.onClick) {\n            _this.props.onClick(e);\n          }\n\n          e.preventDefault();\n        },\n        ref: _this.buttonElement,\n        tooltipProps: _this.props.tooltipProps ? __assign(__assign({}, _this.props.tooltipProps), {\n          disabled: expandableProps.expanded\n        }) : undefined\n      }), _this.props.children, !_this.props.hideDropdownIcon ? Icon({\n        key: \"dropdown-icon\",\n        className: \"icon-right font-weight-normal\",\n        iconName: \"ChevronDownMed\",\n        size: IconSize.small\n      }) : undefined));\n    });\n  };\n\n  ExpandableButton.prototype.focus = function () {\n    if (this.buttonElement.current) {\n      this.buttonElement.current.focus();\n    }\n  };\n\n  ExpandableButton.defaultProps = {\n    expandKey: [KeyCode.downArrow, KeyCode.enter]\n  };\n  return ExpandableButton;\n}(React.Component);\n\nexport { ExpandableButton };","map":{"version":3,"sources":["/Users/ayounghosh/Downloads/Create_Work_Item_Azure_Devops/Front_End/node_modules/azure-devops-ui/Components/Button/ExpandableButton.js"],"names":["__assign","__extends","React","Expandable","Icon","IconSize","css","KeyCode","Location","Button","buttonId","ExpandableButton","_super","props","_this","call","buttonElement","createRef","expandable","collapse","current","expand","renderCallout","dropdownId","anchorElement","anchorPoint","containerElement","undefined","anchorOffset","horizontal","vertical","anchorOrigin","end","dropdownOrigin","start","containerRef","prototype","render","createElement","disabled","expandKey","onCollapse","onExpand","ref","expandableProps","_a","className","onMouseDown","onKeyDown","ariaControls","expanded","ariaExpanded","ariaHasPopup","ariaLabel","tooltipProps","text","children","iconProps","onClick","e","preventDefault","hideDropdownIcon","key","iconName","size","small","focus","defaultProps","downArrow","enter","Component"],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\r\nimport \"../../CommonImports\";\r\nimport \"../../Core/core.css\";\r\nimport \"./Button.css\";\r\nimport \"./ExpandableButton.css\";\r\nimport * as React from \"react\";\r\nimport { Expandable } from '../../Expandable';\r\nimport { Icon, IconSize } from '../../Icon';\r\nimport { css, KeyCode } from '../../Util';\r\nimport { Location } from '../../Utilities/Position';\r\nimport { Button } from \"./Button\";\r\nvar buttonId = 1;\r\nvar ExpandableButton = /** @class */ (function (_super) {\r\n    __extends(ExpandableButton, _super);\r\n    function ExpandableButton(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.buttonElement = React.createRef();\r\n        _this.expandable = React.createRef();\r\n        _this.collapse = function () {\r\n            if (_this.expandable.current) {\r\n                _this.expandable.current.collapse();\r\n            }\r\n        };\r\n        _this.expand = function () {\r\n            if (_this.expandable.current) {\r\n                _this.expandable.current.expand();\r\n            }\r\n        };\r\n        _this.renderCallout = function () {\r\n            return _this.props.renderCallout(_this, _this.dropdownId, _this.props.anchorElement\r\n                ? _this.props.anchorElement\r\n                : !_this.props.anchorPoint\r\n                    ? _this.containerElement.current\r\n                        ? _this.containerElement.current\r\n                        : undefined\r\n                    : undefined, _this.props.anchorOffset || { horizontal: 0, vertical: 0 }, _this.props.anchorOrigin || { horizontal: Location.end, vertical: Location.end }, _this.props.anchorPoint, _this.props.dropdownOrigin || { horizontal: Location.end, vertical: Location.start });\r\n        };\r\n        _this.dropdownId = props.dropdownId || \"dropdown-\" + buttonId++;\r\n        _this.containerElement = props.containerRef || React.createRef();\r\n        return _this;\r\n    }\r\n    ExpandableButton.prototype.render = function () {\r\n        var _this = this;\r\n        // We disable the tooltip when we are expanded. Make sure we dont remove it\r\n        // from the component tree, this causes the button element to get regenerated\r\n        // and focus wont return.\r\n        return (React.createElement(Expandable, { disabled: this.props.disabled, expandKey: this.props.expandKey, onCollapse: this.props.onCollapse, onExpand: this.props.onExpand, renderCallout: this.renderCallout, ref: this.expandable }, function (expandableProps) {\r\n            var _a;\r\n            return (React.createElement(\"div\", { className: css(_this.props.className, \"bolt-expandable-button inline-flex-row\"), onMouseDown: expandableProps.onMouseDown, onKeyDown: expandableProps.onKeyDown, ref: _this.containerElement },\r\n                React.createElement(Button, __assign({}, _this.props, { ariaControls: expandableProps.expanded ? _this.dropdownId : undefined, ariaExpanded: expandableProps.expanded, ariaHasPopup: true, ariaLabel: _this.props.ariaLabel || _this.props.tooltipProps && _this.props.tooltipProps.text ? (_a = _this.props.tooltipProps) === null || _a === void 0 ? void 0 : _a.text : \"\", className: css(!_this.props.text && !_this.props.children && _this.props.iconProps && \"icon-only\", expandableProps.expanded && \"active\"), onClick: function (e) {\r\n                        expandableProps.onClick(e);\r\n                        if (_this.props.onClick) {\r\n                            _this.props.onClick(e);\r\n                        }\r\n                        e.preventDefault();\r\n                    }, ref: _this.buttonElement, tooltipProps: _this.props.tooltipProps ? __assign(__assign({}, _this.props.tooltipProps), { disabled: expandableProps.expanded }) : undefined }),\r\n                    _this.props.children,\r\n                    !_this.props.hideDropdownIcon\r\n                        ? Icon({\r\n                            key: \"dropdown-icon\",\r\n                            className: \"icon-right font-weight-normal\",\r\n                            iconName: \"ChevronDownMed\",\r\n                            size: IconSize.small\r\n                        })\r\n                        : undefined)));\r\n        }));\r\n    };\r\n    ExpandableButton.prototype.focus = function () {\r\n        if (this.buttonElement.current) {\r\n            this.buttonElement.current.focus();\r\n        }\r\n    };\r\n    ExpandableButton.defaultProps = {\r\n        expandKey: [KeyCode.downArrow, KeyCode.enter]\r\n    };\r\n    return ExpandableButton;\r\n}(React.Component));\r\nexport { ExpandableButton };\r\n"]},"metadata":{},"sourceType":"module"}
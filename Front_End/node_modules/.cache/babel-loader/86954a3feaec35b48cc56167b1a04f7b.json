{"ast":null,"code":"/**\r\n * Maximum number of messages to have in the containers that announce() uses.\r\n */\nvar MaxAnnounceChildren = 1;\n/**\r\n * Maximum number of containers for announce() to have per assertiveness level.\r\n */\n\nvar MaxAnnounceContainers = 10;\n/**\r\n * Default number of milliseconds to wait before announcing the start of an operation.\r\n */\n\nvar DefaultAnnounceDelay = 1000;\n/**\r\n * ID of the container for the announce() containers.\r\n */\n\nvar ParentContainerId = \"utils-accessibility-announce\";\nvar nextId = 0;\n/**\r\n * Gets the parent container for all the announce containers.\r\n */\n\nfunction getAnnounceContainer() {\n  var container = document.getElementById(ParentContainerId);\n\n  if (!container) {\n    container = document.createElement(\"div\");\n    container.id = ParentContainerId;\n    container.classList.add(\"visually-hidden\");\n    document.body.appendChild(container);\n  }\n\n  return container;\n}\n/**\r\n * Causes screen readers to read the given message.\r\n * @param message\r\n * @param assertive if true, the screen reader will read the announcement immediately, instead of waiting for \"the next graceful opportunity\"\r\n */\n\n\nexport function announce(message, assertive, pause) {\n  if (assertive === void 0) {\n    assertive = false;\n  }\n\n  if (pause === void 0) {\n    pause = 100;\n  }\n\n  if (!message) {\n    return;\n  }\n\n  var assertiveness = assertive ? \"assertive\" : \"polite\";\n  var parentContainer = getAnnounceContainer();\n  var containerList = parentContainer.getElementsByClassName(assertiveness);\n  var container = containerList.length > 0 ? containerList[containerList.length - 1] : null;\n\n  if (!container || container.childElementCount >= MaxAnnounceChildren) {\n    container = document.createElement(\"div\");\n    container.id = ParentContainerId + nextId++;\n    container.setAttribute(\"aria-live\", assertiveness);\n    container.classList.add(assertiveness);\n    container.setAttribute(\"aria-relevant\", \"additions\");\n    parentContainer.appendChild(container); // getElementsByClassName() returns a live list so the new container is already in this list\n\n    if (containerList.length > MaxAnnounceContainers) {\n      // remove old containers\n      parentContainer.removeChild(containerList[0]);\n    }\n\n    window.setTimeout(function () {\n      // live regions get announced on update not create, so wait a bit and then update\n      announce(message, assertive);\n    }, pause);\n  } else {\n    var child = document.createElement(\"p\");\n    child.textContent = message;\n    container.appendChild(child); // toggling the visibility like this seems to help Edge\n\n    container.style.visibility = \"hidden\";\n    container.style.visibility = \"visible\";\n  }\n}\n/**\r\n * Class for announcing, through a screen reader, when a single operation begins and ends. Supports\r\n * a delay before the starting announcement so that quick operations don't trigger announcements.\r\n *\r\n * To use, create a ProgressAnnouncer, and call completed()\r\n */\n\nvar ProgressAnnouncer =\n/** @class */\nfunction () {\n  function ProgressAnnouncer(options) {\n    this._startAnnounced = false;\n    this._completed = false;\n    this._options = options;\n\n    this._start();\n  }\n  /**\r\n   * Create a ProgressAnnouncer for a promise that will announce promise start and completion/rejection.\r\n   * @param promise\r\n   * @param options\r\n   */\n\n\n  ProgressAnnouncer.forPromise = function (promise, options) {\n    var announcer = new ProgressAnnouncer(options);\n    promise.then(function () {\n      announcer.announceCompleted();\n    }, function () {\n      announcer.announceError();\n    });\n    return announcer;\n  };\n  /**\r\n   * Call this method when the operation has completed. This will cause the end message to be\r\n   * announced if the start message was announced.\r\n   */\n\n\n  ProgressAnnouncer.prototype.announceCompleted = function () {\n    if (!this._completed) {\n      this._completed = true;\n\n      if (this._startAnnounced) {\n        announce(this._options.announceEndMessage);\n      }\n    }\n  };\n  /**\r\n   * Call this method if the operation completes with an error. This will cause the error message\r\n   * to be announced regardless of whether or not the start message was announced.\r\n   */\n\n\n  ProgressAnnouncer.prototype.announceError = function () {\n    if (!this._completed) {\n      this._completed = true;\n      announce(this._options.announceErrorMessage);\n    }\n  };\n  /**\r\n   * Call this method to stop any announcements from being made\r\n   */\n\n\n  ProgressAnnouncer.prototype.cancel = function () {\n    this._completed = true;\n  };\n\n  ProgressAnnouncer.prototype._start = function () {\n    var _this = this; // this._announceDelay = Utils_Core.delay(this, this._options.announceStartDelay !== undefined ? this._options.announceStartDelay : DefaultAnnounceDelay, () => {\n\n\n    window.setTimeout(function () {\n      if (!_this._completed) {\n        announce(_this._options.announceStartMessage);\n      }\n\n      _this._startAnnounced = true;\n    }, this._options.announceStartDelay !== undefined ? this._options.announceStartDelay : DefaultAnnounceDelay);\n  };\n\n  return ProgressAnnouncer;\n}();\n\nexport { ProgressAnnouncer };","map":{"version":3,"sources":["/Users/ayounghosh/Downloads/Create_Work_Item_Azure_Devops/Front_End/node_modules/azure-devops-ui/Core/Util/Accessibility.js"],"names":["MaxAnnounceChildren","MaxAnnounceContainers","DefaultAnnounceDelay","ParentContainerId","nextId","getAnnounceContainer","container","document","getElementById","createElement","id","classList","add","body","appendChild","announce","message","assertive","pause","assertiveness","parentContainer","containerList","getElementsByClassName","length","childElementCount","setAttribute","removeChild","window","setTimeout","child","textContent","style","visibility","ProgressAnnouncer","options","_startAnnounced","_completed","_options","_start","forPromise","promise","announcer","then","announceCompleted","announceError","prototype","announceEndMessage","announceErrorMessage","cancel","_this","announceStartMessage","announceStartDelay","undefined"],"mappings":"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","sourcesContent":["/**\r\n * Maximum number of messages to have in the containers that announce() uses.\r\n */\r\nvar MaxAnnounceChildren = 1;\r\n/**\r\n * Maximum number of containers for announce() to have per assertiveness level.\r\n */\r\nvar MaxAnnounceContainers = 10;\r\n/**\r\n * Default number of milliseconds to wait before announcing the start of an operation.\r\n */\r\nvar DefaultAnnounceDelay = 1000;\r\n/**\r\n * ID of the container for the announce() containers.\r\n */\r\nvar ParentContainerId = \"utils-accessibility-announce\";\r\nvar nextId = 0;\r\n/**\r\n * Gets the parent container for all the announce containers.\r\n */\r\nfunction getAnnounceContainer() {\r\n    var container = document.getElementById(ParentContainerId);\r\n    if (!container) {\r\n        container = document.createElement(\"div\");\r\n        container.id = ParentContainerId;\r\n        container.classList.add(\"visually-hidden\");\r\n        document.body.appendChild(container);\r\n    }\r\n    return container;\r\n}\r\n/**\r\n * Causes screen readers to read the given message.\r\n * @param message\r\n * @param assertive if true, the screen reader will read the announcement immediately, instead of waiting for \"the next graceful opportunity\"\r\n */\r\nexport function announce(message, assertive, pause) {\r\n    if (assertive === void 0) { assertive = false; }\r\n    if (pause === void 0) { pause = 100; }\r\n    if (!message) {\r\n        return;\r\n    }\r\n    var assertiveness = assertive ? \"assertive\" : \"polite\";\r\n    var parentContainer = getAnnounceContainer();\r\n    var containerList = parentContainer.getElementsByClassName(assertiveness);\r\n    var container = (containerList.length > 0 ? containerList[containerList.length - 1] : null);\r\n    if (!container || container.childElementCount >= MaxAnnounceChildren) {\r\n        container = document.createElement(\"div\");\r\n        container.id = ParentContainerId + nextId++;\r\n        container.setAttribute(\"aria-live\", assertiveness);\r\n        container.classList.add(assertiveness);\r\n        container.setAttribute(\"aria-relevant\", \"additions\");\r\n        parentContainer.appendChild(container);\r\n        // getElementsByClassName() returns a live list so the new container is already in this list\r\n        if (containerList.length > MaxAnnounceContainers) {\r\n            // remove old containers\r\n            parentContainer.removeChild(containerList[0]);\r\n        }\r\n        window.setTimeout(function () {\r\n            // live regions get announced on update not create, so wait a bit and then update\r\n            announce(message, assertive);\r\n        }, pause);\r\n    }\r\n    else {\r\n        var child = document.createElement(\"p\");\r\n        child.textContent = message;\r\n        container.appendChild(child);\r\n        // toggling the visibility like this seems to help Edge\r\n        container.style.visibility = \"hidden\";\r\n        container.style.visibility = \"visible\";\r\n    }\r\n}\r\n/**\r\n * Class for announcing, through a screen reader, when a single operation begins and ends. Supports\r\n * a delay before the starting announcement so that quick operations don't trigger announcements.\r\n *\r\n * To use, create a ProgressAnnouncer, and call completed()\r\n */\r\nvar ProgressAnnouncer = /** @class */ (function () {\r\n    function ProgressAnnouncer(options) {\r\n        this._startAnnounced = false;\r\n        this._completed = false;\r\n        this._options = options;\r\n        this._start();\r\n    }\r\n    /**\r\n     * Create a ProgressAnnouncer for a promise that will announce promise start and completion/rejection.\r\n     * @param promise\r\n     * @param options\r\n     */\r\n    ProgressAnnouncer.forPromise = function (promise, options) {\r\n        var announcer = new ProgressAnnouncer(options);\r\n        promise.then(function () {\r\n            announcer.announceCompleted();\r\n        }, function () {\r\n            announcer.announceError();\r\n        });\r\n        return announcer;\r\n    };\r\n    /**\r\n     * Call this method when the operation has completed. This will cause the end message to be\r\n     * announced if the start message was announced.\r\n     */\r\n    ProgressAnnouncer.prototype.announceCompleted = function () {\r\n        if (!this._completed) {\r\n            this._completed = true;\r\n            if (this._startAnnounced) {\r\n                announce(this._options.announceEndMessage);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Call this method if the operation completes with an error. This will cause the error message\r\n     * to be announced regardless of whether or not the start message was announced.\r\n     */\r\n    ProgressAnnouncer.prototype.announceError = function () {\r\n        if (!this._completed) {\r\n            this._completed = true;\r\n            announce(this._options.announceErrorMessage);\r\n        }\r\n    };\r\n    /**\r\n     * Call this method to stop any announcements from being made\r\n     */\r\n    ProgressAnnouncer.prototype.cancel = function () {\r\n        this._completed = true;\r\n    };\r\n    ProgressAnnouncer.prototype._start = function () {\r\n        var _this = this;\r\n        // this._announceDelay = Utils_Core.delay(this, this._options.announceStartDelay !== undefined ? this._options.announceStartDelay : DefaultAnnounceDelay, () => {\r\n        window.setTimeout(function () {\r\n            if (!_this._completed) {\r\n                announce(_this._options.announceStartMessage);\r\n            }\r\n            _this._startAnnounced = true;\r\n        }, this._options.announceStartDelay !== undefined ? this._options.announceStartDelay : DefaultAnnounceDelay);\r\n    };\r\n    return ProgressAnnouncer;\r\n}());\r\nexport { ProgressAnnouncer };\r\n"]},"metadata":{},"sourceType":"module"}
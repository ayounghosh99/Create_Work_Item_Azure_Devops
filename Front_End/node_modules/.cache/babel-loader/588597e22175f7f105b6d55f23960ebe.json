{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport \"../../CommonImports\";\nimport \"../../Core/core.css\";\nimport * as React from \"react\";\nimport * as Utils_Accessibility from '../../Core/Util/Accessibility';\nimport { FocusGroupContext } from '../../FocusGroup';\nimport { FocusZoneContext } from '../../FocusZone';\nimport { MouseWithin } from '../../MouseWithin';\nimport * as Resources from '../../Resources.Core';\nimport { css, getSafeId, KeyCode, setFocusVisible } from '../../Util';\nimport { getTabIndex } from '../../Utilities/Focus';\n\nvar Expandable =\n/** @class */\nfunction (_super) {\n  __extends(Expandable, _super);\n\n  function Expandable() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      expanded: false\n    };\n\n    _this.collapse = function () {\n      if (_this.state.expanded) {\n        _this.setState({\n          expanded: false\n        });\n\n        Utils_Accessibility.announce(Resources.Collapsed, true);\n\n        if (_this.props.onCollapse) {\n          _this.props.onCollapse();\n        }\n      }\n    };\n\n    _this.expand = function () {\n      if (!_this.state.expanded) {\n        _this.setState({\n          expanded: !_this.state.expanded\n        });\n\n        Utils_Accessibility.announce(Resources.Expanded, true);\n\n        if (_this.props.onExpand) {\n          _this.props.onExpand();\n        }\n      }\n    };\n\n    _this.onClick = function (event) {\n      if (!_this.props.disabled) {\n        if (!event.defaultPrevented) {\n          if (!_this.state.expanded && !_this.ignoreClick) {\n            _this.expand();\n\n            event.preventDefault();\n          }\n        }\n      } else {\n        event.preventDefault();\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      if (!event.defaultPrevented) {\n        // If the control key is pressed we want to navigate in a focus zone and not open the menu\n        if (event.ctrlKey) {\n          return;\n        }\n\n        if (!_this.state.expanded && _this.isExpandKey(event)) {\n          _this.ignoreClick = false;\n\n          _this.expand();\n\n          event.preventDefault();\n        }\n      }\n    };\n\n    _this.onMouseDown = function () {\n      // If the callout is expanded when we click on it, we want to ignore the click\n      // and let the blur occur and close the callout.\n      _this.ignoreClick = _this.state.expanded;\n    };\n\n    return _this;\n  }\n\n  Expandable.prototype.render = function () {\n    var expanded = this.state.expanded;\n    var child = this.props.children;\n    return React.createElement(React.Fragment, null, child({\n      expanded: expanded,\n      onClick: this.onClick,\n      onKeyDown: this.onKeyDown,\n      onMouseDown: this.onMouseDown\n    }), expanded && this.props.renderCallout && this.props.renderCallout());\n  };\n\n  Expandable.prototype.isExpandKey = function (event) {\n    return Array.isArray(this.props.expandKey) && this.props.expandKey.indexOf(event.which) !== -1 || event.which === this.props.expandKey;\n  };\n\n  Expandable.defaultProps = {\n    expandKey: KeyCode.downArrow\n  };\n  return Expandable;\n}(React.Component);\n\nexport { Expandable };\nvar expandableContainerId = 1;\n/**\r\n * ExpandableContainer is a specialized form of Expandable and generally shouldn't be used.\r\n * It's main goal is to provider mouse enter/leave behavior for collapsing.\r\n *\r\n * @NOTE: This component MAY be deprecated in the future, use <Expandable /> instead.\r\n */\n\nvar ExpandableContainer =\n/** @class */\nfunction (_super) {\n  __extends(ExpandableContainer, _super);\n\n  function ExpandableContainer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.element = React.createRef();\n    _this.expandedOnHover = false;\n    _this.expandable = React.createRef();\n    _this.expandableId = \"expandableContainer-\" + expandableContainerId++;\n\n    _this.collapse = function () {\n      if (_this.expandable.current) {\n        _this.expandable.current.collapse();\n      }\n    };\n\n    _this.expand = function () {\n      if (_this.expandable.current) {\n        _this.expandable.current.expand();\n      }\n    };\n\n    _this.onFocus = function (event) {\n      // Only call onFocus for the FocusGroup is the expandable itself is getting focus.\n      // Otherwise it is going to a child element and it should manage focus appropriately.\n      if (_this.props.id && (!_this.element.current || _this.element.current === event.target)) {\n        _this.context.onFocus(_this.props.id);\n      }\n    };\n\n    _this.onMouseEnter = function () {\n      if (_this.props.expandOnHover) {\n        _this.expandedOnHover = true;\n        setFocusVisible(false);\n\n        _this.expand();\n      }\n    };\n\n    _this.onMouseLeave = function () {\n      if (_this.expandedOnHover) {\n        _this.collapse();\n      }\n    };\n\n    _this.renderCallout = function () {\n      return _this.props.renderCallout(_this.expandable.current, _this.expandableId, _this.element.current);\n    };\n\n    return _this;\n  }\n\n  ExpandableContainer.prototype.render = function () {\n    var _this = this;\n\n    return React.createElement(FocusZoneContext.Consumer, null, function (zoneContext) {\n      return React.createElement(MouseWithin, {\n        enterDelay: _this.props.expandDelay,\n        leaveDelay: _this.props.collapseDelay,\n        onMouseEnter: _this.onMouseEnter,\n        onMouseLeave: _this.onMouseLeave,\n        updateStateOnMouseChange: false\n      }, function (mouseContext) {\n        return React.createElement(Expandable, __assign({}, _this.props, {\n          renderCallout: undefined,\n          ref: _this.expandable\n        }), function (expandableProps) {\n          return React.createElement(\"div\", {\n            \"aria-controls\": expandableProps.expanded ? getSafeId(_this.props.expandableId) : undefined,\n            \"aria-expanded\": expandableProps.expanded,\n            \"aria-haspopup\": true,\n            \"aria-label\": _this.props.ariaLabel,\n            className: css(_this.props.className, \"bolt-expandable-container flex-row flex-center\", expandableProps.expanded && \"expanded\"),\n            \"data-focuszone\": !_this.props.disabled && !_this.props.excludeFocusZone ? zoneContext.focuszoneId : undefined,\n            id: getSafeId(_this.props.id),\n            onClick: expandableProps.onClick,\n            onFocus: _this.onFocus,\n            onKeyDown: expandableProps.onKeyDown,\n            onMouseDown: expandableProps.onMouseDown,\n            onMouseEnter: mouseContext.onMouseEnter,\n            onMouseLeave: mouseContext.onMouseLeave,\n            role: _this.props.role || \"button\",\n            tabIndex: getTabIndex(_this.props, _this.context),\n            ref: _this.element\n          }, _this.props.children, expandableProps.expanded && _this.renderCallout());\n        });\n      });\n    });\n  };\n\n  ExpandableContainer.contextType = FocusGroupContext;\n  ExpandableContainer.defaultProps = {\n    collapseDelay: 250,\n    expandDelay: 250,\n    expandKey: [KeyCode.downArrow, KeyCode.enter]\n  };\n  return ExpandableContainer;\n}(React.Component);\n\nexport { ExpandableContainer };","map":{"version":3,"sources":["/Users/ayounghosh/Downloads/Create_Work_Item_Azure_Devops/Front_End/node_modules/azure-devops-ui/Components/Expandable/Expandable.js"],"names":["__assign","__extends","React","Utils_Accessibility","FocusGroupContext","FocusZoneContext","MouseWithin","Resources","css","getSafeId","KeyCode","setFocusVisible","getTabIndex","Expandable","_super","_this","apply","arguments","state","expanded","collapse","setState","announce","Collapsed","props","onCollapse","expand","Expanded","onExpand","onClick","event","disabled","defaultPrevented","ignoreClick","preventDefault","onKeyDown","ctrlKey","isExpandKey","onMouseDown","prototype","render","child","children","createElement","Fragment","renderCallout","Array","isArray","expandKey","indexOf","which","defaultProps","downArrow","Component","expandableContainerId","ExpandableContainer","element","createRef","expandedOnHover","expandable","expandableId","current","onFocus","id","target","context","onMouseEnter","expandOnHover","onMouseLeave","Consumer","zoneContext","enterDelay","expandDelay","leaveDelay","collapseDelay","updateStateOnMouseChange","mouseContext","undefined","ref","expandableProps","ariaLabel","className","excludeFocusZone","focuszoneId","role","tabIndex","contextType","enter"],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\r\nimport \"../../CommonImports\";\r\nimport \"../../Core/core.css\";\r\nimport * as React from \"react\";\r\nimport * as Utils_Accessibility from '../../Core/Util/Accessibility';\r\nimport { FocusGroupContext } from '../../FocusGroup';\r\nimport { FocusZoneContext } from '../../FocusZone';\r\nimport { MouseWithin } from '../../MouseWithin';\r\nimport * as Resources from '../../Resources.Core';\r\nimport { css, getSafeId, KeyCode, setFocusVisible } from '../../Util';\r\nimport { getTabIndex } from '../../Utilities/Focus';\r\nvar Expandable = /** @class */ (function (_super) {\r\n    __extends(Expandable, _super);\r\n    function Expandable() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.state = { expanded: false };\r\n        _this.collapse = function () {\r\n            if (_this.state.expanded) {\r\n                _this.setState({ expanded: false });\r\n                Utils_Accessibility.announce(Resources.Collapsed, true);\r\n                if (_this.props.onCollapse) {\r\n                    _this.props.onCollapse();\r\n                }\r\n            }\r\n        };\r\n        _this.expand = function () {\r\n            if (!_this.state.expanded) {\r\n                _this.setState({ expanded: !_this.state.expanded });\r\n                Utils_Accessibility.announce(Resources.Expanded, true);\r\n                if (_this.props.onExpand) {\r\n                    _this.props.onExpand();\r\n                }\r\n            }\r\n        };\r\n        _this.onClick = function (event) {\r\n            if (!_this.props.disabled) {\r\n                if (!event.defaultPrevented) {\r\n                    if (!_this.state.expanded && !_this.ignoreClick) {\r\n                        _this.expand();\r\n                        event.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n        _this.onKeyDown = function (event) {\r\n            if (!event.defaultPrevented) {\r\n                // If the control key is pressed we want to navigate in a focus zone and not open the menu\r\n                if (event.ctrlKey) {\r\n                    return;\r\n                }\r\n                if (!_this.state.expanded && _this.isExpandKey(event)) {\r\n                    _this.ignoreClick = false;\r\n                    _this.expand();\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n        _this.onMouseDown = function () {\r\n            // If the callout is expanded when we click on it, we want to ignore the click\r\n            // and let the blur occur and close the callout.\r\n            _this.ignoreClick = _this.state.expanded;\r\n        };\r\n        return _this;\r\n    }\r\n    Expandable.prototype.render = function () {\r\n        var expanded = this.state.expanded;\r\n        var child = this.props.children;\r\n        return (React.createElement(React.Fragment, null,\r\n            child({ expanded: expanded, onClick: this.onClick, onKeyDown: this.onKeyDown, onMouseDown: this.onMouseDown }),\r\n            expanded && this.props.renderCallout && this.props.renderCallout()));\r\n    };\r\n    Expandable.prototype.isExpandKey = function (event) {\r\n        return (Array.isArray(this.props.expandKey) && this.props.expandKey.indexOf(event.which) !== -1) || event.which === this.props.expandKey;\r\n    };\r\n    Expandable.defaultProps = {\r\n        expandKey: KeyCode.downArrow\r\n    };\r\n    return Expandable;\r\n}(React.Component));\r\nexport { Expandable };\r\nvar expandableContainerId = 1;\r\n/**\r\n * ExpandableContainer is a specialized form of Expandable and generally shouldn't be used.\r\n * It's main goal is to provider mouse enter/leave behavior for collapsing.\r\n *\r\n * @NOTE: This component MAY be deprecated in the future, use <Expandable /> instead.\r\n */\r\nvar ExpandableContainer = /** @class */ (function (_super) {\r\n    __extends(ExpandableContainer, _super);\r\n    function ExpandableContainer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.element = React.createRef();\r\n        _this.expandedOnHover = false;\r\n        _this.expandable = React.createRef();\r\n        _this.expandableId = \"expandableContainer-\" + expandableContainerId++;\r\n        _this.collapse = function () {\r\n            if (_this.expandable.current) {\r\n                _this.expandable.current.collapse();\r\n            }\r\n        };\r\n        _this.expand = function () {\r\n            if (_this.expandable.current) {\r\n                _this.expandable.current.expand();\r\n            }\r\n        };\r\n        _this.onFocus = function (event) {\r\n            // Only call onFocus for the FocusGroup is the expandable itself is getting focus.\r\n            // Otherwise it is going to a child element and it should manage focus appropriately.\r\n            if (_this.props.id && (!_this.element.current || _this.element.current === event.target)) {\r\n                _this.context.onFocus(_this.props.id);\r\n            }\r\n        };\r\n        _this.onMouseEnter = function () {\r\n            if (_this.props.expandOnHover) {\r\n                _this.expandedOnHover = true;\r\n                setFocusVisible(false);\r\n                _this.expand();\r\n            }\r\n        };\r\n        _this.onMouseLeave = function () {\r\n            if (_this.expandedOnHover) {\r\n                _this.collapse();\r\n            }\r\n        };\r\n        _this.renderCallout = function () {\r\n            return _this.props.renderCallout(_this.expandable.current, _this.expandableId, _this.element.current);\r\n        };\r\n        return _this;\r\n    }\r\n    ExpandableContainer.prototype.render = function () {\r\n        var _this = this;\r\n        return (React.createElement(FocusZoneContext.Consumer, null, function (zoneContext) { return (React.createElement(MouseWithin, { enterDelay: _this.props.expandDelay, leaveDelay: _this.props.collapseDelay, onMouseEnter: _this.onMouseEnter, onMouseLeave: _this.onMouseLeave, updateStateOnMouseChange: false }, function (mouseContext) { return (React.createElement(Expandable, __assign({}, _this.props, { renderCallout: undefined, ref: _this.expandable }), function (expandableProps) { return (React.createElement(\"div\", { \"aria-controls\": expandableProps.expanded ? getSafeId(_this.props.expandableId) : undefined, \"aria-expanded\": expandableProps.expanded, \"aria-haspopup\": true, \"aria-label\": _this.props.ariaLabel, className: css(_this.props.className, \"bolt-expandable-container flex-row flex-center\", expandableProps.expanded && \"expanded\"), \"data-focuszone\": !_this.props.disabled && !_this.props.excludeFocusZone ? zoneContext.focuszoneId : undefined, id: getSafeId(_this.props.id), onClick: expandableProps.onClick, onFocus: _this.onFocus, onKeyDown: expandableProps.onKeyDown, onMouseDown: expandableProps.onMouseDown, onMouseEnter: mouseContext.onMouseEnter, onMouseLeave: mouseContext.onMouseLeave, role: _this.props.role || \"button\", tabIndex: getTabIndex(_this.props, _this.context), ref: _this.element },\r\n            _this.props.children,\r\n            expandableProps.expanded && _this.renderCallout())); })); })); }));\r\n    };\r\n    ExpandableContainer.contextType = FocusGroupContext;\r\n    ExpandableContainer.defaultProps = {\r\n        collapseDelay: 250,\r\n        expandDelay: 250,\r\n        expandKey: [KeyCode.downArrow, KeyCode.enter]\r\n    };\r\n    return ExpandableContainer;\r\n}(React.Component));\r\nexport { ExpandableContainer };\r\n"]},"metadata":{},"sourceType":"module"}
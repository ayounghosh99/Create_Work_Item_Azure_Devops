{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport \"../../CommonImports\";\nimport \"../../Core/core.css\";\nimport * as React from \"react\";\nimport { getSafeId, noop } from '../../Util';\nexport var FocusGroupContext = React.createContext({\n  onFocus: noop\n});\n\nvar FocusGroup =\n/** @class */\nfunction (_super) {\n  __extends(FocusGroup, _super);\n\n  function FocusGroup(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onFocus = function (focusedElementId) {\n      // Only setState if the focusedElement is changing. This prevents us from setting the state\n      // when focus keeps getting fired on the same element. Example: Browser keeps losing and\n      // getting focus.\n      if (_this.state.focusedElementId !== focusedElementId) {\n        _this.setState({\n          focusedElementId: focusedElementId\n        });\n      }\n    };\n\n    _this.state = {\n      defaultElementId: props.defaultElementId,\n      focusedElementId: props.defaultElementId\n    };\n    return _this;\n  }\n\n  FocusGroup.getDerivedStateFromProps = function (props, state) {\n    if (state.defaultElementId !== props.defaultElementId) {\n      return __assign(__assign({}, state), {\n        defaultElementId: props.defaultElementId,\n        focusedElementId: props.defaultElementId\n      });\n    }\n\n    return null;\n  };\n\n  FocusGroup.prototype.render = function () {\n    return React.createElement(FocusGroupContext.Provider, {\n      value: {\n        focusedElementId: this.state.focusedElementId,\n        onFocus: this.onFocus\n      }\n    }, this.props.children);\n  };\n\n  FocusGroup.prototype.focus = function (elementId) {\n    var id = getSafeId(elementId || this.state.focusedElementId);\n\n    if (id) {\n      var element = document.getElementById(id);\n\n      if (element) {\n        element.focus();\n      }\n    }\n  };\n\n  return FocusGroup;\n}(React.Component);\n\nexport { FocusGroup };","map":{"version":3,"sources":["/Users/ayounghosh/Downloads/Create_Work_Item_Azure_Devops/Front_End/node_modules/azure-devops-ui/Components/FocusGroup/FocusGroup.js"],"names":["__assign","__extends","React","getSafeId","noop","FocusGroupContext","createContext","onFocus","FocusGroup","_super","props","_this","call","focusedElementId","state","setState","defaultElementId","getDerivedStateFromProps","prototype","render","createElement","Provider","value","children","focus","elementId","id","element","document","getElementById","Component"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAO,qBAAP;AACA,OAAO,qBAAP;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,YAAhC;AACA,OAAO,IAAIC,iBAAiB,GAAGH,KAAK,CAACI,aAAN,CAAoB;AAC/CC,EAAAA,OAAO,EAAEH;AADsC,CAApB,CAAxB;;AAGP,IAAII,UAAU;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAC9CR,EAAAA,SAAS,CAACO,UAAD,EAAaC,MAAb,CAAT;;AACA,WAASD,UAAT,CAAoBE,KAApB,EAA2B;AACvB,QAAIC,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,IAAZ,EAAkBF,KAAlB,KAA4B,IAAxC;;AACAC,IAAAA,KAAK,CAACJ,OAAN,GAAgB,UAAUM,gBAAV,EAA4B;AACxC;AACA;AACA;AACA,UAAIF,KAAK,CAACG,KAAN,CAAYD,gBAAZ,KAAiCA,gBAArC,EAAuD;AACnDF,QAAAA,KAAK,CAACI,QAAN,CAAe;AAAEF,UAAAA,gBAAgB,EAAEA;AAApB,SAAf;AACH;AACJ,KAPD;;AAQAF,IAAAA,KAAK,CAACG,KAAN,GAAc;AAAEE,MAAAA,gBAAgB,EAAEN,KAAK,CAACM,gBAA1B;AAA4CH,MAAAA,gBAAgB,EAAEH,KAAK,CAACM;AAApE,KAAd;AACA,WAAOL,KAAP;AACH;;AACDH,EAAAA,UAAU,CAACS,wBAAX,GAAsC,UAAUP,KAAV,EAAiBI,KAAjB,EAAwB;AAC1D,QAAIA,KAAK,CAACE,gBAAN,KAA2BN,KAAK,CAACM,gBAArC,EAAuD;AACnD,aAAOhB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKc,KAAL,CAAT,EAAsB;AAAEE,QAAAA,gBAAgB,EAAEN,KAAK,CAACM,gBAA1B;AAA4CH,QAAAA,gBAAgB,EAAEH,KAAK,CAACM;AAApE,OAAtB,CAAf;AACH;;AACD,WAAO,IAAP;AACH,GALD;;AAMAR,EAAAA,UAAU,CAACU,SAAX,CAAqBC,MAArB,GAA8B,YAAY;AACtC,WAAQjB,KAAK,CAACkB,aAAN,CAAoBf,iBAAiB,CAACgB,QAAtC,EAAgD;AAAEC,MAAAA,KAAK,EAAE;AACzDT,QAAAA,gBAAgB,EAAE,KAAKC,KAAL,CAAWD,gBAD4B;AAEzDN,QAAAA,OAAO,EAAE,KAAKA;AAF2C;AAAT,KAAhD,EAGC,KAAKG,KAAL,CAAWa,QAHZ,CAAR;AAIH,GALD;;AAMAf,EAAAA,UAAU,CAACU,SAAX,CAAqBM,KAArB,GAA6B,UAAUC,SAAV,EAAqB;AAC9C,QAAIC,EAAE,GAAGvB,SAAS,CAACsB,SAAS,IAAI,KAAKX,KAAL,CAAWD,gBAAzB,CAAlB;;AACA,QAAIa,EAAJ,EAAQ;AACJ,UAAIC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwBH,EAAxB,CAAd;;AACA,UAAIC,OAAJ,EAAa;AACTA,QAAAA,OAAO,CAACH,KAAR;AACH;AACJ;AACJ,GARD;;AASA,SAAOhB,UAAP;AACH,CArC+B,CAqC9BN,KAAK,CAAC4B,SArCwB,CAAhC;;AAsCA,SAAStB,UAAT","sourcesContent":["import { __assign, __extends } from \"tslib\";\r\nimport \"../../CommonImports\";\r\nimport \"../../Core/core.css\";\r\nimport * as React from \"react\";\r\nimport { getSafeId, noop } from '../../Util';\r\nexport var FocusGroupContext = React.createContext({\r\n    onFocus: noop\r\n});\r\nvar FocusGroup = /** @class */ (function (_super) {\r\n    __extends(FocusGroup, _super);\r\n    function FocusGroup(props) {\r\n        var _this = _super.call(this, props) || this;\r\n        _this.onFocus = function (focusedElementId) {\r\n            // Only setState if the focusedElement is changing. This prevents us from setting the state\r\n            // when focus keeps getting fired on the same element. Example: Browser keeps losing and\r\n            // getting focus.\r\n            if (_this.state.focusedElementId !== focusedElementId) {\r\n                _this.setState({ focusedElementId: focusedElementId });\r\n            }\r\n        };\r\n        _this.state = { defaultElementId: props.defaultElementId, focusedElementId: props.defaultElementId };\r\n        return _this;\r\n    }\r\n    FocusGroup.getDerivedStateFromProps = function (props, state) {\r\n        if (state.defaultElementId !== props.defaultElementId) {\r\n            return __assign(__assign({}, state), { defaultElementId: props.defaultElementId, focusedElementId: props.defaultElementId });\r\n        }\r\n        return null;\r\n    };\r\n    FocusGroup.prototype.render = function () {\r\n        return (React.createElement(FocusGroupContext.Provider, { value: {\r\n                focusedElementId: this.state.focusedElementId,\r\n                onFocus: this.onFocus\r\n            } }, this.props.children));\r\n    };\r\n    FocusGroup.prototype.focus = function (elementId) {\r\n        var id = getSafeId(elementId || this.state.focusedElementId);\r\n        if (id) {\r\n            var element = document.getElementById(id);\r\n            if (element) {\r\n                element.focus();\r\n            }\r\n        }\r\n    };\r\n    return FocusGroup;\r\n}(React.Component));\r\nexport { FocusGroup };\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport \"../../CommonImports\";\nimport \"../../Core/core.css\";\nimport * as React from \"react\";\nimport { isFunctionalChildren } from '../../Util';\n\nvar MouseWithin =\n/** @class */\nfunction (_super) {\n  __extends(MouseWithin, _super);\n\n  function MouseWithin() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.enterTimeout = 0;\n    _this.delayTimeout = 0;\n    _this.mouse = false;\n    /**\r\n     * onMouseEnter method that should be attached to the onMouseEnter handler of the\r\n     * continer's root element.\r\n     */\n\n    _this.onMouseEnter = function (event) {\n      // If the mouse is just entering one of the child components and not just moving\n      // from one child to another we will call the onMouseEnter delegate if supplied.\n      if (!_this.mouse) {\n        _this.mouse = true; // Clear any pending leave if we have left and re-entered the component during\n        // the leaveTimeout.\n\n        if (_this.delayTimeout) {\n          window.clearTimeout(_this.delayTimeout);\n          _this.delayTimeout = 0;\n        }\n\n        if (_this.props.enterDelay) {\n          event.persist(); // persist does not preserve the currentTarget so we do that manually\n\n          var currentTarget_1 = event.currentTarget;\n          _this.enterTimeout = window.setTimeout(function () {\n            _this.enterTimeout = 0;\n            var newCurrentTarget = event.currentTarget;\n            event.currentTarget = currentTarget_1;\n\n            _this.mouseEntered(event);\n\n            event.currentTarget = newCurrentTarget;\n          }, _this.props.enterDelay);\n        } else {\n          _this.mouseEntered(event);\n        }\n      }\n    };\n    /**\r\n     * onMouseLeave method that should be attached to the onMouseLeave handler of the\r\n     * container's root element.\r\n     */\n\n\n    _this.onMouseLeave = function (event) {\n      if (_this.mouse) {\n        _this.mouse = false; // Clear any pending enterTimeout if we didnt stay over the element long enough.\n\n        if (_this.enterTimeout) {\n          window.clearTimeout(_this.enterTimeout);\n          _this.enterTimeout = 0;\n        }\n\n        if (_this.props.leaveDelay) {\n          event.persist();\n          _this.delayTimeout = window.setTimeout(function () {\n            _this.delayTimeout = 0;\n\n            _this.mouseLeft(event);\n          }, _this.props.leaveDelay);\n        } else {\n          _this.mouseLeft(event);\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  MouseWithin.prototype.render = function () {\n    var newProps = {\n      onMouseEnter: this.onMouseEnter,\n      onMouseLeave: this.onMouseLeave\n    };\n\n    if (isFunctionalChildren(this.props.children)) {\n      var child = this.props.children; // For functional components we pass the hasMouse attribute as well.\n\n      newProps.hasMouse = this.mouse;\n      return child(newProps);\n    } else {\n      var child = React.Children.only(this.props.children);\n      return React.cloneElement(child, __assign(__assign({}, child.props), newProps), child.props.children);\n    }\n  };\n\n  MouseWithin.prototype.componentWillUnmount = function () {\n    if (this.enterTimeout) {\n      window.clearTimeout(this.enterTimeout);\n    }\n\n    if (this.delayTimeout) {\n      window.clearTimeout(this.delayTimeout);\n    }\n  };\n  /**\r\n   * hasMouse returns true if the mouse is contained within the component\r\n   * hierarchy. This includes portals, the element may or may not\r\n   * be a direct descendant of the component in the DOM structure.\r\n   */\n\n\n  MouseWithin.prototype.hasMouse = function () {\n    return this.mouse;\n  };\n\n  MouseWithin.prototype.mouseEntered = function (event) {\n    // If we are tracking the mouse state we will force a component update.\n    if (this.props.updateStateOnMouseChange) {\n      this.forceUpdate();\n    }\n\n    if (this.props.onMouseEnter) {\n      this.props.onMouseEnter(event);\n    }\n  };\n\n  MouseWithin.prototype.mouseLeft = function (event) {\n    // If we are tracking the mouse state we will force a component update.\n    if (this.props.updateStateOnMouseChange) {\n      this.forceUpdate();\n    }\n\n    if (this.props.onMouseLeave) {\n      this.props.onMouseLeave(event);\n    }\n  };\n\n  MouseWithin.defaultProps = {\n    updateStateOnMouseChange: true\n  };\n  return MouseWithin;\n}(React.Component);\n\nexport { MouseWithin };","map":{"version":3,"sources":["/Users/ayounghosh/Downloads/Create_Work_Item_Azure_Devops/Front_End/node_modules/azure-devops-ui/Components/MouseWithin/MouseWithin.js"],"names":["__assign","__extends","React","isFunctionalChildren","MouseWithin","_super","_this","apply","arguments","enterTimeout","delayTimeout","mouse","onMouseEnter","event","window","clearTimeout","props","enterDelay","persist","currentTarget_1","currentTarget","setTimeout","newCurrentTarget","mouseEntered","onMouseLeave","leaveDelay","mouseLeft","prototype","render","newProps","children","child","hasMouse","Children","only","cloneElement","componentWillUnmount","updateStateOnMouseChange","forceUpdate","defaultProps","Component"],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\r\nimport \"../../CommonImports\";\r\nimport \"../../Core/core.css\";\r\nimport * as React from \"react\";\r\nimport { isFunctionalChildren } from '../../Util';\r\nvar MouseWithin = /** @class */ (function (_super) {\r\n    __extends(MouseWithin, _super);\r\n    function MouseWithin() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.enterTimeout = 0;\r\n        _this.delayTimeout = 0;\r\n        _this.mouse = false;\r\n        /**\r\n         * onMouseEnter method that should be attached to the onMouseEnter handler of the\r\n         * continer's root element.\r\n         */\r\n        _this.onMouseEnter = function (event) {\r\n            // If the mouse is just entering one of the child components and not just moving\r\n            // from one child to another we will call the onMouseEnter delegate if supplied.\r\n            if (!_this.mouse) {\r\n                _this.mouse = true;\r\n                // Clear any pending leave if we have left and re-entered the component during\r\n                // the leaveTimeout.\r\n                if (_this.delayTimeout) {\r\n                    window.clearTimeout(_this.delayTimeout);\r\n                    _this.delayTimeout = 0;\r\n                }\r\n                if (_this.props.enterDelay) {\r\n                    event.persist();\r\n                    // persist does not preserve the currentTarget so we do that manually\r\n                    var currentTarget_1 = event.currentTarget;\r\n                    _this.enterTimeout = window.setTimeout(function () {\r\n                        _this.enterTimeout = 0;\r\n                        var newCurrentTarget = event.currentTarget;\r\n                        event.currentTarget = currentTarget_1;\r\n                        _this.mouseEntered(event);\r\n                        event.currentTarget = newCurrentTarget;\r\n                    }, _this.props.enterDelay);\r\n                }\r\n                else {\r\n                    _this.mouseEntered(event);\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * onMouseLeave method that should be attached to the onMouseLeave handler of the\r\n         * container's root element.\r\n         */\r\n        _this.onMouseLeave = function (event) {\r\n            if (_this.mouse) {\r\n                _this.mouse = false;\r\n                // Clear any pending enterTimeout if we didnt stay over the element long enough.\r\n                if (_this.enterTimeout) {\r\n                    window.clearTimeout(_this.enterTimeout);\r\n                    _this.enterTimeout = 0;\r\n                }\r\n                if (_this.props.leaveDelay) {\r\n                    event.persist();\r\n                    _this.delayTimeout = window.setTimeout(function () {\r\n                        _this.delayTimeout = 0;\r\n                        _this.mouseLeft(event);\r\n                    }, _this.props.leaveDelay);\r\n                }\r\n                else {\r\n                    _this.mouseLeft(event);\r\n                }\r\n            }\r\n        };\r\n        return _this;\r\n    }\r\n    MouseWithin.prototype.render = function () {\r\n        var newProps = {\r\n            onMouseEnter: this.onMouseEnter,\r\n            onMouseLeave: this.onMouseLeave\r\n        };\r\n        if (isFunctionalChildren(this.props.children)) {\r\n            var child = this.props.children;\r\n            // For functional components we pass the hasMouse attribute as well.\r\n            newProps.hasMouse = this.mouse;\r\n            return child(newProps);\r\n        }\r\n        else {\r\n            var child = React.Children.only(this.props.children);\r\n            return React.cloneElement(child, __assign(__assign({}, child.props), newProps), child.props.children);\r\n        }\r\n    };\r\n    MouseWithin.prototype.componentWillUnmount = function () {\r\n        if (this.enterTimeout) {\r\n            window.clearTimeout(this.enterTimeout);\r\n        }\r\n        if (this.delayTimeout) {\r\n            window.clearTimeout(this.delayTimeout);\r\n        }\r\n    };\r\n    /**\r\n     * hasMouse returns true if the mouse is contained within the component\r\n     * hierarchy. This includes portals, the element may or may not\r\n     * be a direct descendant of the component in the DOM structure.\r\n     */\r\n    MouseWithin.prototype.hasMouse = function () {\r\n        return this.mouse;\r\n    };\r\n    MouseWithin.prototype.mouseEntered = function (event) {\r\n        // If we are tracking the mouse state we will force a component update.\r\n        if (this.props.updateStateOnMouseChange) {\r\n            this.forceUpdate();\r\n        }\r\n        if (this.props.onMouseEnter) {\r\n            this.props.onMouseEnter(event);\r\n        }\r\n    };\r\n    MouseWithin.prototype.mouseLeft = function (event) {\r\n        // If we are tracking the mouse state we will force a component update.\r\n        if (this.props.updateStateOnMouseChange) {\r\n            this.forceUpdate();\r\n        }\r\n        if (this.props.onMouseLeave) {\r\n            this.props.onMouseLeave(event);\r\n        }\r\n    };\r\n    MouseWithin.defaultProps = {\r\n        updateStateOnMouseChange: true\r\n    };\r\n    return MouseWithin;\r\n}(React.Component));\r\nexport { MouseWithin };\r\n"]},"metadata":{},"sourceType":"module"}
import { __assign, __awaiter, __extends, __generator } from "tslib";
import "../../CommonImports";
import "../../Core/core.css";
import "./ColorDropdown.css";
import * as React from "react";
import { wait } from '../../Core/Util/Promise';
import { format } from '../../Core/Util/String';
import { Button } from '../../Button';
import { Callout, ContentSize } from '../../Callout';
import { Dropdown } from '../../Dropdown';
import { FocusZone, FocusZoneDirection, FocusZoneKeyStroke } from '../../FocusZone';
import { ListSelection } from '../../List';
import * as Resources from '../../Resources.Color';
import { SimpleTableCell, Table } from '../../Table';
import { css, KeyCode } from '../../Util';
import { ArrayItemProvider } from '../../Utilities/Provider';
var ColorDropdown = /** @class */ (function (_super) {
    __extends(ColorDropdown, _super);
    function ColorDropdown() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._selection = new ListSelection();
        return _this;
    }
    ColorDropdown.prototype.render = function () {
        var _this = this;
        var color = this.props.color;
        var className = this.addColorClass(color);
        var idx = colorItems.findIndex(function (ci) { return "#" + ci.id === color; });
        this._selection.select(idx >= 0 ? idx : 0);
        return (React.createElement(Dropdown, { ariaLabel: this.props.ariaLabel, className: css(this.props.className, className, "color-dropdown"), dismissOnSelect: true, items: colorItems, renderCallout: ColorDropdownCallout, renderSelectedItems: function () { return ""; }, selection: this._selection, onSelect: function (evt, item) {
                _this.props.onColorSelected("#" + item.id);
            } }));
    };
    /**
     * If a rule for the given color doesn't already exist, creates it.
     *
     * The rule will look like
     *  .color-dropdown.bg-[color] { background-color: #[color]; }
     *
     * Returns the classname to apply to the Dropdown.
     */
    ColorDropdown.prototype.addColorClass = function (color) {
        color = color.replace("#", "");
        var styleSheet = this.getStyleSheet();
        var className = "bg-" + color;
        var selector = "." + className + " .bolt-dropdown-expandable-textfield-input";
        for (var i = 0; i < styleSheet.cssRules.length; i++) {
            if (styleSheet.cssRules[i].type === CSSRule.STYLE_RULE) {
                var rule = styleSheet.cssRules[i];
                if (rule.selectorText === selector) {
                    // rule already exists
                    return className;
                }
            }
        }
        styleSheet.insertRule(selector + " { background-color: #" + color + "; }");
        return className;
    };
    /**
     * Gets or creates a style sheet shared between all ColorDropdowns.
     */
    ColorDropdown.prototype.getStyleSheet = function () {
        for (var i = 0; i < document.styleSheets.length; i++) {
            if (document.styleSheets[i].title === ColorDropdownStyleSheetTitle) {
                return document.styleSheets[i];
            }
        }
        var elem = document.createElement("style");
        elem.title = ColorDropdownStyleSheetTitle;
        // WebKit hack
        elem.appendChild(document.createTextNode(""));
        document.head.appendChild(elem);
        return elem.sheet;
    };
    return ColorDropdown;
}(React.Component));
export { ColorDropdown };
var ColorDropdownStyleSheetTitle = "colorDropdownStyles";
function ColorDropdownCallout(props) {
    return React.createElement(ColorDropdownCalloutComponent, __assign({}, props));
}
var ColorDropdownCalloutComponent = /** @class */ (function (_super) {
    __extends(ColorDropdownCalloutComponent, _super);
    function ColorDropdownCalloutComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._focusedColumn = 0;
        _this.renderCell = function (rowIndex, columnIndex, tableColumn, tableRow, ariaRowIndex) {
            var _a;
            var cell = tableRow.cells[columnIndex];
            var selectedIdx = (_a = _this.props.selection) === null || _a === void 0 ? void 0 : _a.value[0].beginIndex;
            var selected = cell === colorItems[selectedIdx !== null && selectedIdx !== void 0 ? selectedIdx : 0];
            return (React.createElement(SimpleTableCell, { ariaRowIndex: ariaRowIndex, columnIndex: columnIndex, key: columnIndex, tableColumn: tableColumn },
                React.createElement(Button, { id: rowIndex + "-" + columnIndex, className: css(selected && "bolt-dropdown-init-focus", "color-button flex-grow"), style: {
                        backgroundColor: "#" + cell.id
                    }, tooltipProps: { text: cell.text }, onClick: function (e) {
                        var _a;
                        var idx = colorItems.findIndex(function (ci) { return ci.id === cell.id; });
                        if (idx >= 0) {
                            (_a = _this.props.selection) === null || _a === void 0 ? void 0 : _a.select(idx);
                            _this.props.onSelect && _this.props.onSelect(e, colorItems[idx]);
                        }
                    }, onFocus: function () { return (_this._focusedColumn = columnIndex); }, 
                    // hack to prevent <tr> from getting focused
                    onKeyDown: function (e) {
                        if (columnIndex === 0 && e.which === KeyCode.leftArrow) {
                            e.preventDefault();
                        }
                    } })));
        };
        _this.columns = [
            { id: "c1", renderCell: _this.renderCell, width: -100 / 11 },
            { id: "c2", renderCell: _this.renderCell, width: -100 / 11 },
            { id: "c3", renderCell: _this.renderCell, width: -100 / 11 },
            { id: "c4", renderCell: _this.renderCell, width: -100 / 11 },
            { id: "c5", renderCell: _this.renderCell, width: -100 / 11 },
            { id: "c6", renderCell: _this.renderCell, width: -100 / 11 },
            { id: "c7", renderCell: _this.renderCell, width: -100 / 11 },
            { id: "c8", renderCell: _this.renderCell, width: -100 / 11 },
            { id: "c9", renderCell: _this.renderCell, width: -100 / 11 },
            { id: "c10", renderCell: _this.renderCell, width: -100 / 11 },
            { id: "c11", renderCell: _this.renderCell, width: -100 / 11 }
        ];
        return _this;
    }
    ColorDropdownCalloutComponent.prototype.render = function () {
        var _this = this;
        var _a = this.props, anchorElement = _a.anchorElement, anchorOffset = _a.anchorOffset, anchorOrigin = _a.anchorOrigin, anchorPoint = _a.anchorPoint, _b = _a.blurDismiss, blurDismiss = _b === void 0 ? true : _b, calloutContentClassName = _a.calloutContentClassName, contentLocation = _a.contentLocation, dropdownOrigin = _a.dropdownOrigin, excludeTabStop = _a.excludeTabStop, id = _a.id, lightDismiss = _a.lightDismiss, onFilterKeyDown = _a.onFilterKeyDown;
        var focusOnMount = true;
        var onDismiss = function () {
            if (_this.props.onDismiss) {
                _this.props.onDismiss();
            }
        };
        return (React.createElement(Callout, { anchorElement: anchorElement, anchorOffset: anchorOffset, anchorOrigin: anchorOrigin, anchorPoint: anchorPoint, blurDismiss: blurDismiss, calloutOrigin: dropdownOrigin, contentClassName: css(calloutContentClassName, "bolt-dropdown flex-column custom-scrollbar v-scroll-auto h-scroll-hidden color-dropdown-callout"), contentLocation: contentLocation, contentShadow: true, contentSize: ContentSize.Auto, escDismiss: true, id: id, lightDismiss: lightDismiss, focuszoneProps: {
                postprocessKeyStroke: function (event) {
                    // dismiss the callout on tab key instead of letting the
                    // browser handle the tab key, since with React.portals it
                    // will move to the body, instead of the next tabbable element after
                    // the dropdown.
                    if (event.which === KeyCode.tab && !event.defaultPrevented) {
                        event.preventDefault();
                        onDismiss();
                        return FocusZoneKeyStroke.IgnoreAll;
                    }
                    return FocusZoneKeyStroke.IgnoreNone;
                }
            }, onDismiss: onDismiss },
            React.createElement(FocusZone, { circularNavigation: true, defaultActiveElement: ".bolt-dropdown-init-focus", direction: FocusZoneDirection.Vertical, focusOnMount: focusOnMount !== undefined ? focusOnMount : true },
                React.createElement("div", { className: "bolt-dropdown-container no-outline", onKeyDown: onFilterKeyDown },
                    React.createElement("div", { "aria-hidden": "true", className: "no-outline", tabIndex: !excludeTabStop ? -1 : undefined, role: "listbox" }),
                    React.createElement(Table, { columns: this.columns, containerClassName: "color-dropdown-table-container", itemProvider: colorRowProvider, onFocus: function (reactEvent, r) { return __awaiter(_this, void 0, void 0, function () {
                            var evt, row, button;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        evt = reactEvent.nativeEvent;
                                        // Sometimes FocusZone correctly focuses the right button. If we also focus it, that
                                        // screws up FocusZone's counting. So we have to wait a sec and check to see if the
                                        // button is already focused to avoid double focusing.
                                        return [4 /*yield*/, wait(0)];
                                    case 1:
                                        // Sometimes FocusZone correctly focuses the right button. If we also focus it, that
                                        // screws up FocusZone's counting. So we have to wait a sec and check to see if the
                                        // button is already focused to avoid double focusing.
                                        _a.sent();
                                        if (evt.target.tagName === "TR") {
                                            row = evt.target;
                                            button = row.querySelector("td[data-column-index=\"" + this._focusedColumn + "\"] button");
                                            if (button && button !== document.activeElement) {
                                                button.focus();
                                            }
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        }); } })))));
    };
    return ColorDropdownCalloutComponent;
}(React.Component));
var colorRows = [
    {
        cells: [
            { id: "222222", text: Resources.Black },
            { id: "292E6B", text: Resources.Blue },
            { id: "009CCC", text: Resources.Turquoise },
            { id: "00643A", text: Resources.Teal },
            { id: "339947", text: Resources.Green },
            { id: "FBBC3D", text: Resources.Yellow },
            { id: "DB552C", text: Resources.Orange },
            { id: "7F1725", text: Resources.Red },
            { id: "EC008C", text: Resources.Pink },
            { id: "5C197B", text: Resources.Purple },
            { id: "51399F", text: Resources.Indigo }
        ]
    },
    {
        cells: [
            { id: "444444", text: format(Resources.TenPercentLighterColor, Resources.Black.toLowerCase()) },
            { id: "1B478B", text: format(Resources.TenPercentLighterColor, Resources.Blue.toLowerCase()) },
            { id: "43B4D5", text: format(Resources.TenPercentLighterColor, Resources.Turquoise.toLowerCase()) },
            { id: "207752", text: format(Resources.TenPercentLighterColor, Resources.Teal.toLowerCase()) },
            { id: "60AF49", text: format(Resources.TenPercentLighterColor, Resources.Green.toLowerCase()) },
            { id: "FBD144", text: format(Resources.TenPercentLighterColor, Resources.Yellow.toLowerCase()) },
            { id: "E87025", text: format(Resources.TenPercentLighterColor, Resources.Orange.toLowerCase()) },
            { id: "B20B1E", text: format(Resources.TenPercentLighterColor, Resources.Red.toLowerCase()) },
            { id: "EF33A3", text: format(Resources.TenPercentLighterColor, Resources.Pink.toLowerCase()) },
            { id: "71338D", text: format(Resources.TenPercentLighterColor, Resources.Purple.toLowerCase()) },
            { id: "6951AA", text: format(Resources.TenPercentLighterColor, Resources.Indigo.toLowerCase()) }
        ]
    },
    {
        cells: [
            { id: "666666", text: format(Resources.TwentyPercentLighterColor, Resources.Black.toLowerCase()) },
            { id: "0D60AB", text: format(Resources.TwentyPercentLighterColor, Resources.Blue.toLowerCase()) },
            { id: "86CDDE", text: format(Resources.TwentyPercentLighterColor, Resources.Turquoise.toLowerCase()) },
            { id: "56987D", text: format(Resources.TwentyPercentLighterColor, Resources.Teal.toLowerCase()) },
            { id: "8DC54B", text: format(Resources.TwentyPercentLighterColor, Resources.Green.toLowerCase()) },
            { id: "FBE74B", text: format(Resources.TwentyPercentLighterColor, Resources.Yellow.toLowerCase()) },
            { id: "F58B1F", text: format(Resources.TwentyPercentLighterColor, Resources.Orange.toLowerCase()) },
            { id: "E60017", text: format(Resources.TwentyPercentLighterColor, Resources.Red.toLowerCase()) },
            { id: "F266BA", text: format(Resources.TwentyPercentLighterColor, Resources.Pink.toLowerCase()) },
            { id: "9260A1", text: format(Resources.TwentyPercentLighterColor, Resources.Purple.toLowerCase()) },
            { id: "8874C2", text: format(Resources.TwentyPercentLighterColor, Resources.Indigo.toLowerCase()) }
        ]
    },
    {
        cells: [
            { id: "888888", text: format(Resources.FortyPercentLighterColor, Resources.Black.toLowerCase()) },
            { id: "007ACC", text: format(Resources.FortyPercentLighterColor, Resources.Blue.toLowerCase()) },
            { id: "C9E7E7", text: format(Resources.FortyPercentLighterColor, Resources.Turquoise.toLowerCase()) },
            { id: "7CAF9A", text: format(Resources.FortyPercentLighterColor, Resources.Teal.toLowerCase()) },
            { id: "A8CE4B", text: format(Resources.FortyPercentLighterColor, Resources.Green.toLowerCase()) },
            { id: "FBFD52", text: format(Resources.FortyPercentLighterColor, Resources.Yellow.toLowerCase()) },
            { id: "F7A24B", text: format(Resources.FortyPercentLighterColor, Resources.Orange.toLowerCase()) },
            { id: "EB3345", text: format(Resources.FortyPercentLighterColor, Resources.Red.toLowerCase()) },
            { id: "F599D1", text: format(Resources.FortyPercentLighterColor, Resources.Pink.toLowerCase()) },
            { id: "AE88B9", text: format(Resources.FortyPercentLighterColor, Resources.Purple.toLowerCase()) },
            { id: "AA9CDF", text: format(Resources.FortyPercentLighterColor, Resources.Indigo.toLowerCase()) }
        ]
    },
    {
        cells: [
            { id: "AAAAAA", text: format(Resources.SixtyPercentLighterColor, Resources.Black.toLowerCase()) },
            { id: "3F9BD8", text: format(Resources.SixtyPercentLighterColor, Resources.Blue.toLowerCase()) },
            { id: "D6EDED", text: format(Resources.SixtyPercentLighterColor, Resources.Turquoise.toLowerCase()) },
            { id: "9CC3B2", text: format(Resources.SixtyPercentLighterColor, Resources.Teal.toLowerCase()) },
            { id: "C3D84C", text: format(Resources.SixtyPercentLighterColor, Resources.Green.toLowerCase()) },
            { id: "FCFD7D", text: format(Resources.SixtyPercentLighterColor, Resources.Yellow.toLowerCase()) },
            { id: "F9B978", text: format(Resources.SixtyPercentLighterColor, Resources.Orange.toLowerCase()) },
            { id: "F06673", text: format(Resources.SixtyPercentLighterColor, Resources.Red.toLowerCase()) },
            { id: "F9CCE8", text: format(Resources.SixtyPercentLighterColor, Resources.Pink.toLowerCase()) },
            { id: "C7ABD0", text: format(Resources.SixtyPercentLighterColor, Resources.Purple.toLowerCase()) },
            { id: "C0B6E9", text: format(Resources.SixtyPercentLighterColor, Resources.Indigo.toLowerCase()) }
        ]
    },
    {
        cells: [
            { id: "CCCCCC", text: format(Resources.EightyPercentLighterColor, Resources.Black.toLowerCase()) },
            { id: "7FBCE5", text: format(Resources.EightyPercentLighterColor, Resources.Blue.toLowerCase()) },
            { id: "E4F3F3", text: format(Resources.EightyPercentLighterColor, Resources.Turquoise.toLowerCase()) },
            { id: "BFD8CD", text: format(Resources.EightyPercentLighterColor, Resources.Teal.toLowerCase()) },
            { id: "D7E587", text: format(Resources.EightyPercentLighterColor, Resources.Green.toLowerCase()) },
            { id: "FCFEA8", text: format(Resources.EightyPercentLighterColor, Resources.Yellow.toLowerCase()) },
            { id: "FBD0A5", text: format(Resources.EightyPercentLighterColor, Resources.Orange.toLowerCase()) },
            { id: "F599A2", text: format(Resources.EightyPercentLighterColor, Resources.Red.toLowerCase()) },
            { id: "FBDDEF", text: format(Resources.EightyPercentLighterColor, Resources.Pink.toLowerCase()) },
            { id: "E0CAE7", text: format(Resources.EightyPercentLighterColor, Resources.Purple.toLowerCase()) },
            { id: "DAD4F7", text: format(Resources.EightyPercentLighterColor, Resources.Indigo.toLowerCase()) }
        ]
    }
];
var colorRowProvider = new ArrayItemProvider(colorRows);
var colorItems = colorRows.reduce(function (acc, val) { return acc.concat(val.cells); }, []);
